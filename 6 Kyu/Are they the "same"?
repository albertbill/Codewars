//Given two arrays a and b write a function comp(a, b) (compSame(a, b) in Clojure) that checks whether the two arrays have the "same" elements, with the same multiplicities. "Same" means, here, that the elements in b are the elements in a squared, regardless of the order.

//Examples
//Valid arrays
//a = [121, 144, 19, 161, 19, 144, 19, 11]  
//b = [121, 14641, 20736, 361, 25921, 361, 20736, 361]
//comp(a, b) returns true because in b 121 is the square of 11, 14641 is the square of 121, 20736 the square of 144, 361 the square of 19, 25921 the square of 161, and so on.

//Invalid arrays
//If we change the first number to something else, comp may not return true anymore:

//a = [121, 144, 19, 161, 19, 144, 19, 11]  
//b = [132, 14641, 20736, 361, 25921, 361, 20736, 361]
//comp(a,b) returns false because in b 132 is not the square of any number of a.

function comp(array1, array2){
  if(array1===null || array2===null) {
    return false;
  } else {
    let hasilPangkat=[];
    let temp = [];
    for(const value of array1) {
      hasilPangkat.push(Math.pow(value,2))
    }
    hasilPangkat.sort(function(a, b){return a-b});
    array2.sort(function(a, b){return a-b});
    console.log(hasilPangkat);
    console.log(array2)
    for(let i=0;i<hasilPangkat.length;i++) {
      for(let j=0;j<array2.length;j++) {
        if(i==j) {
          if(hasilPangkat[i]!==array2[j]) {
            temp.push(array2);
          }
        }
      }
    }
    if (temp.length > 0)
      return false
    else
      return true;
  }
}
